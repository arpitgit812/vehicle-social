c
@like = @post.likes.find(params[:format])
current_user.id
@post = Post.find(params[:post_id])
params
parms
c
@post.likes
@like = @post.likes.find(params[:id])
@post = Post.find(params[:post_id])
params
parmas
c
@like = @post.likes.find(params[:id])
@post = Post.find(13)
@post = Post.find(content: "tiele")
@like = @post.likes.find(params[:id])
@post = Post.find(params[:id])
c
@like = @post.likes.find(params[:id])
@post = Post.find(params[:id])
c
@post
Like.find(6)
@post.likes.find(6)
@post.likes.find(11)
@post.likes.find(9)
@post.likes.find(2)
@post.likes.find(1)
@post.likes
@post.likeable
@post.likes.present?
@post
@post = Post.find(params[:id])
c
n
c
n
@post.likes
@like = @post.likes.find(params[:user_id])
@post = Post.find(params[:id])
c
@post.like
@post.likes
@like = @post.likes.find(params[:id])
 @post = Post.find(params[:id])
params
c
params
post_id
@post = Post.find(params[:post_id])
c
Post.find(params[:post_id])
params[:post_id]
c
@comment = Comment.new
find_commentable
@commentable = find_commentable
c
find_commentable
c
id
params[:post_id]
params
parans
params[:post_id]
n
wn
c
find_commentable
c
return Regexp.last_match[1].classify.constantize.find(value)
params.each do |name, value|
params
c
post
@comment.user = current_user
@comment = @commentable.comments.build(comment_params)
 @commentable = find_commentable
n
whereami
c
@post = Post.find(params[:post_id])
c
params
params[:post_id
@post = Post.find(params[:post_id])
c
@post
post
c
cc
c
n
N
Post.find(params[:id])
params[:id]
c
post
c
params[:id]
@post = Post.find(params[:id])
@post
post
posot
current_user
currunt_user
params[:id]
parmas[:id]
id
@post = Post.find(params[:id])
c
params
n
post.likes
post
current_user.posts.like
current_user.posts.likes
current_user.posts
current_user.post
current_user
]current_user
]current_user && post.likes.exists?
c
Post.find(params[:id])
c
post.likes
c
params
c
params
c
current_user && post.likes.exists?(user_id: current_user.id)
post.likes
current_user
c
params
@post = Post.find(params[:id])
c
continue
]c
continue
c
